# ============ tools/qa_tools.py ============
import json
from typing import List
from duckduckgo_search import DDGS


# Temporary context store
context_store: List[str] = []


def answer_from_context(question: str) -> str:
    """
    Answers user questions based on loaded paper context.
    """
    if not context_store:
        return "No context available. Please upload or summarize a paper first."

    # Combine context for simulated retrieval
    context = "\n".join(context_store)
    return f"Based on the document, here's an answer to your question:\n\nQuestion: {question}\nContext: {context[:500]}...\n\n[Answer generated by LLM]"


def explain_concept(concept: str) -> str:
    """
    Explains academic concepts with web support.
    """
    results = DDGS().text(f"{concept} explained", max_results=3)
    links = "\n".join([r['href'] for r in results])
    return f"**{concept} Explanation**\n\n{concept} is a concept in academic literature.\nMore context:\n{links}"


def load_context(text: str):
    """
    Add paper summary or paragraph to internal context memory.
    """
    context_store.append(text)


def reset_context():
    """
    Clears stored context.
    """
    context_store.clear()
